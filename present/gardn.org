#+TITLE: The Gardn of EDN
#+STARTUP: inlineimages

* Hello, world! (tbl3rd)

  - Tom Lyons
  - SPLASH Clojure Meetup (ACM SIGPLAN)
  - Wednesday 7 November 2018

  - https://github.com/tbl3rd

  - https://www.linkedin.com/in/tbl3rd/

  - https://twitter.com/tbl3rd

  - https://github.com/tbl3rd/clj-intro.git

* Hello, world! (Java)

  - Write this main.java file in some project tree.

#+BEGIN_SRC java
    public class HelloWorld {
        public static void main(String[] args) {
            System.out.println("Hello, World");
        }
    }
#+END_SRC

  - Compile it into a =.jar= file.
  - Run with =java -jar hello.jar= ... or something.
  - Debug it with IntelliJ IDEA ... or something.

* Hello, world! (Clojure)

  - Evaluate this expression.

#+BEGIN_SRC clojure
    (println "Hello, world!")
#+END_SRC

  - Run as if it were Perl, Python, Ruby, or Shell.

#+BEGIN_EXAMPLE sh
    shell # clojure -e '(println "Hello, world!")'
    Hello, world!
    shell #
#+END_EXAMPLE

  - You /can/ build a =.jar= file and run it with =java -jar=.
  - You can serve it to a browser and run it there.
  - You can compile to "native" code (Graal or LLVM).

* History

  - [[https://www.youtube.com/watch?v=zPT-DuG0UjU][Rich Hickey]] (BDFL): 30 months of /hammock time/.

  - Released a stable Clojure 1.0 in 2009.

  - Code from 2009 still runs today on 1.10.1.

  - Runs unchanged on every JDK released since 2007.

  - (= Clojure (+ Lisp Data 65-years-experience))

* Keep it about the problem

  - Compare Java to Clojure.

#+BEGIN_SRC java
    public class HelloWorld {       // Java
        public static void main(String[] args) {
            System.out.println("Hello, World");
        }
    }
#+END_SRC

#+BEGIN_SRC clojure
    (println "Hello, world!")       ; Clojure
#+END_SRC

  - No =public class static void main String args System=
  - Less other syntax: =()=, =[]=, ={}=, and so on.

* Programming is about computers and languages

  - Programming is about building systems with computers.

  - A /program/ specifies what a computer will do.

  - The specification is written in a /programming language/.

  - /Programming/ is writing that specification down.

  - /Goal:/ Understand computers to build systems.

* Programming is about everything

  - /Programming/ is dialog with computers about the world.

  - Computers and programming languages are human tools.
  - A computer programmer uses those tools and others ...
    - because they complement innate human abilities.
    - to explore the world and build understanding.

  - A /program/ communicates that understanding to others.

  - /Goal:/ Share solutions to human problems.

* Hosted Functional Lisp

  - Clojure is a /hosted functional Lisp/.

  - /Hosted/ means it leverages another technology.
    - Clojure leverages Java and the JVM.
    - Clojurescript leverages Javascript.

  - /Functional/ means it favors expressions
     of immutable data and function composition.

  - /Lisp/ means it is as simple as is practical.

* No ceremony!

  - Clojure is a /data-oriented/ programming language.

  - Defining and transforming data is central.

  - There is data and the means to transform it.

  - Add as little as possible to get in the way.

  - Clojure programmers say, /No ceremony!/

* Read, Eval, and Print Loop (REPL)

  The Clojure dialog is a loop.

  - =read= a scalar or collection expression.

  - =eval= it according to 3 simple rules.
    - A literal evaluates to itself.
    - A symbol has the value bound to it.
    - A list applies its head to its tail.

  - =print= the result, and loop again.

* The programming cycle

  - *Java*, *Scala*, *Python*, ...

    - Write, compile, run, read, debug, edit, compile ...
    - Use some *IDE* with its own syntax.
    - Manage projects with other languages and tools.

  - *Clojure*

    - Run, write, read, edit, edit, edit ...
    - Work within the system as you build it.
    - Manage projects with the same language and tools.

* The Gardn of EDN

  - Extensible Data Notation

  - EDN is a data interchange format like JSON.

  - EDN also happens to be the syntax of Clojure.

  - All Clojure code is EDN (Clojure) data.

  - EDN has an informal [[https://github.com/edn-format/edn#edn][specification]], like YAML.

  - Code is data, so programming is programmable.

* Scalars

#+BEGIN_SRC clojure
    Numbers   0  23  -17  2.71828  3.14159   6e23  22/7
              1/137  76.0M  285N  -0070  0xCAFEBABE
              2r1010  36rCRAZY

    Chars     \a \b ... \y \z \0 ... \9 \space \newline

    Keywords  :keyword :import :require :as :else :keys

    Nil       nil
    Booleans  false  true

    Strings   "Strings communicate outside a program."
    Regexs    #"/"      #"\s+"     #"[0-9a-fA-f]*"
#+END_SRC

  ... and there is one other scalar introduced later.

* Collections

#+BEGIN_SRC clojure
    Vectors  [0 1 2]  [nil \c :kw "string"]

             [[env schema :as db]]

    Sets     #{nil false}  #{0 "" [] :false}

    Maps     {:a 0 :b 1}  {:keys [env schema] :as db}

             {:falsey #{nil false}
              :truthy #{0 \space :false "" [] {} #{}}}
#+END_SRC

   ... and there is one other introduced later.

* More collections

#+BEGIN_SRC clojure
    Vectors  ["Clojure" 0 :to fn?]

             [[env scheme :as db]]

             [4 [2 [1 3]] [6 [5 7]]]
#+END_SRC

* More collections

#+BEGIN_SRC clojure
    Vectors  ["Clojure" 0 :to fn?]

             [[env scheme :as db]]

             [4 [2 [1 3]] [6 [5 7]]]

             [         4
             [    2
             [  1   3             ]]
             [              6
             [            5   7  ]]]
#+END_SRC
* More collections

#+BEGIN_SRC clojure
    Vectors  ["Clojure" 0 :to fn?]

             [[env scheme :as db]]

             [4 [2 [1 3]] [6 [5 7]]]

             [         4
             [    2
             [  1   3             ]]
             [              6
             [            5   7  ]]]
#+END_SRC

    - Every /collection/ is potentially a /tree/.

* More collections

#+BEGIN_SRC clojure
    Maps     {:A :T, :C :G, :T :A, :G :C}

             {:Title "Montenegro"
              :Year 1981
              :Rated :R
              :Released "09 Oct 1981"
              :Director "Dušan Makavejev"}

             {:id 1 :x 7 :y 589 :Δx 24 :Δy 11}
#+END_SRC
* More collections

#+BEGIN_SRC clojure
    Sets     #{"Chico" "Groucho" "Harpo" "Zeppo"}

    Strings  "A string is a sequence of characters."
#+END_SRC

    - Everything nests however you like.

#+BEGIN_SRC clojure
             {[247711 128745 615585] #{ 7 20}
              [724475 209311 596076] #{47 35}
              [ 49338 359939 906095] #{61   }
              [174818 239856 437406] #{ 6 22}
              [535936 885819 472347] #{74  9}
              [ 70989 376305 883810] #{26 68}}
#+END_SRC

    - Collections are trees. Remember?

* Data

#+BEGIN_SRC clojure
  [... {:pipeline_version "cfd0c6b"
        :document_status "Normal"
        :gvcf_path "gs://broad-gotc-prod-storage/pipeline/..."
        :regulatory_designation "RESEARCH_ONLY"
        :project "G102438"
        :data_type "WGS"
        :contamination 9.15968E-4
        :sample_alias "NWD804584"
        :version 3
        :location "GCP"
        :gvcf_size 6465061643
        :gvcf_md5 "30d3fd47fe6876ed91960dfc319306c5"
        :analysis_date "2017-11-03T11:47:30.153-04:00"} ...]
#+END_SRC

* More data

#+BEGIN_SRC clojure
  [:html5
   [:head
    [:title "Home | Compojure Docs"]]
   [:body
    [:div {:class "container-fluid"}
     [:div {:class "row-fluid"}
      [:div {:class "span2 menu"}]
      [:div {:class "span10 content"}
       [:h1 "Compojure Docs"]
       [:ul
        [:li [:a {:href "/start"} "Getting Started"]]
        [:li [:a {:href "/routes"} "Routes in Detail"]]
        [:li [:a {:href "/nesting"} "Nesting Routes"]]]]]]]]
#+END_SRC

* More data

#+BEGIN_SRC clojure
  [:vmext:RegisterVimServerParams {:id 7}
   [:vmext:VimServer :name "dvc1-name"
    [:Description "Got me ..."]
    [:vmext:Username "lyonst"]
    [:vmext:Password "password"]
    [:vmext:Url "https://127.0.0.1"]
    [:vmext:IsEnabled true]]
   [:vmext:ShieldManager {:id 23} :name "vsm1"
    [:vmext:Username "vsm1-user"]
    [:vmext:Password "vsm1-pass"]
    [:vmext:Url "https://127.0.0.1"]]]
#+END_SRC

* More data

#+BEGIN_SRC clojure
  [:piano {:octave 4 :tempo 74}
   [1/8 #{:e :f# :-a :-d} :a 1/2 #{:f# :+d}]
   [1/8 #{:-e :e :+c} :a 1/2 #{:e :c}]
   [1/8 #{:e :f# :-a :-d} :a :+d :+c# :+e :+d :b :+c#]
   [1/2 #{:-e :c :a} 1/2 #{:e :c}]]

  [4/4 #{[:guitar {:octave 3}
          1/16 :r :r 1/8 :g :r :d :r :g :g :d]
         [:banjo {:octave 3}
          1/16 :b :+c 1/8 :+d :b :+c :a :b :g :a]}]
#+END_SRC

  - Why vectors?
  - Why maps?
  - Why sets?

* More data

#+BEGIN_SRC clojure
  [ ... [9    :artist/name     "John Lennon"]
        [9    :band/member     [17 23 42]]
        ...
        [23   :artist/name     "The Beatles"]
        [23   :band/members    [9 10 11 12]]
        [23   :band/recordings [444 555 ...]]
        ...
        [444  :album/title     "Revolver"]
        [444  :album/tracks    [... 5050]]
        ...
        [5050 :track/title     "Tomorrow Never Knows"]
        [5050 :track/artists   [23 ...]] ... ]
#+END_SRC

* Expressions

  - Scalars and collections comprise most expressions.

  - All the expressions seen so far are /literals/.

  - Literals "=print= like they =read=".

  - A literal expression will =eval= to itself.

  - One scalar does not print as read: *Symbol*

  - And one collection does not print as read: *List*

* Symbols

  A few symbols have already sneaked in: =fn?=  =schema=  =db=

  Here are some other symbols.

  =ns fn + = symbol -> ->> nil? keyword? java.lang.String=

  Symbols serve as /identifiers/ or /variables/ in Clojure.

  They name other things within a program.

  A symbol can name any value or expression.

  It both /is/ a value and can /have/ a value.

* Lists

  A list combines other expressions to produce a new value.

#+BEGIN_SRC clojure
      (+ 0 1 2)  (fn [n] (+ 1 n))  (fn? odd?)

      (def beatles #{"George" "John" "Paul" "Ringo"})

      (defn add1 [n] (+ 1 n))

      (if (odd? (rand-int 9) :odd :even))

      (for [x "ab" y "cd"] {x y})
#+END_SRC

  Lists are what make things happen in Clojure programs.

* Evaluation

  - All scalars except *Symbol* evaluate to themselves.

  - Read =22/7= in and print =22/7= out.

  - All collections except *List* evaluate to themselves.

  - Read ={:b 1 :a 0}= in, maybe print ={:a 0 :b 1}= out.

  - Symbols and Lists evaluate differently though.

* List evaluation

  The /head/ of a list determines the fate of its /tail/.

  The head is usually a function like =list= or =first=.

  =list= at the head collects its tail into a list.

  =first= returns the head and =rest= returns the tail.

#+BEGIN_SRC clojure
             (list 0 1 2 3 4 5)   is (0 1 2 3 4 5)
      (first (list 0 1 2 3 4 5))  is  0
      (rest  (list 0 1 2 3 4 5))  is   (1 2 3 4 5)
#+END_SRC

  To =eval= a list, =apply= its head to its tail.

  Symbols get values via =def= or =fn= /binding/ expressions.

  After the following =def= expression is evaluated ...

#+BEGIN_SRC clojure
    (def beatles #{"George" "John" "Paul" "Ringo"})
#+END_SRC

  ... the *Symbol* =beatles= has a value that is a *Set*.

#+BEGIN_SRC clojure
    beatles  is  #{"Ringo" "John" "George" "Paul"}
#+END_SRC

  A symbol is a name for some value.

  Like a /variable/ except that it does not vary.

* Conjuring collections

#+BEGIN_SRC clojure
  (def marx [:chico :groucho :harpo])

  (conj marx :zeppo)    is  [:chico :groucho :harpo :zeppo]
  (conj marx :gummo)    is  [:chico :groucho :harpo :gummo]
  (conj marx :karl)     is  [:chico :groucho :harpo :karl]
  (assoc marx 1 :karl)  is  [:chico :karl    :harpo]
  (replace marx [0 2])  is  [:chico          :harpo]

  marx                  is  [:chico :groucho :harpo]
#+END_SRC

  - Collections are values, just like scalars.
  - All values are immutable.
  - No value changes.

* Functions and macros

  =(fn? x)= function tests whether =x= is a function.

#+BEGIN_SRC clojure
      (fn? fn?)               is  true
      (fn? true)              is  false
#+END_SRC

  =fn= is a special form to produce a function value.

#+BEGIN_SRC clojure
      (fn? (fn [n] (+ 1 n)))  is  true
#+END_SRC

  =defn= itself is a /macro/ over =def= and =fn=.

#+BEGIN_SRC clojure
      (defn add1     [n] (+ 1 n))
      (def  add1 (fn [n] (+ 1 n)))
#+END_SRC

  - Functions are values too.

* Quoting

  After the following =def= expression ...

#+BEGIN_SRC clojure
    (def beatles #{"George" "John" "Paul" "Ringo"})

    beatles  is  #{"Ringo" "John" "George" "Paul"}
#+END_SRC

  =(quote ...)= supresses evaluation of =...=

  =quote= is so useful that it gets its own syntax.

  ='beatles= is =(quote beatles)= which is just =beatles=

  =quote= is to macros as =identity= is to functions.

* More evaluation

#+BEGIN_SRC clojure
       (+ 0 1 2 3)             is  6
  (fn?  +)                     is  true
  (fn? (+ 0 1 2 3))            is  false

  (defn add1 [n] (+ 1 n))
       (add1  2)               is  3
  (fn?  add1)                  is  true

  (    (fn [n] (+ 1 n)) 2)     is  3
  (fn? (fn [n] (+ 1 n))  )     is  true

  (into {} (for [x "ab" y [0 1]] [x y])
  (if (odd? (rand-int 9)) :odd :even)
#+END_SRC

* More evaluation

#+BEGIN_SRC clojure
    (datomic/q
      '[:find ?title
        :in $ ?artist-name
        :where
        [?a :artist/name ?artist-name]
        [?t :track/artists ?a]
        [?t :track/name ?title]]
      db "John Lennon")
#+END_SRC

* More data

#+BEGIN_SRC clojure
  [ ... {:db/id           9
         :artist/name     "John Lennon"
         :band/member     [17 23 42] ...} ...
        {:db/id           23
         :artist/name     "The Beatles"
         :band/members    [9 ...]
         :band/recordings [444 ...] ...} ...
        {:db/id           444
         :album/title     "Revolver"
         :album/tracks    [5050 ...] ...} ...
        {:db/id           5050
         :track/title     "Tomorrow Never Knows"
         :track/artists   [23] ... } ... ]
#+END_SRC

* Sequences

    - Every collection can be sequenced.
    - A sequence prints as a list.

#+BEGIN_SRC clojure
      (seq  "Clojure")        is (\C \l \o \j \u \r \e)

      (seq  [0 1 2 3 4])      is (0 1 2 3 4)
      (seq #{0 1 2 3 4})      is (0 1 2 3 4)

      (seq  {:a 0 :b 1 :c 2}) is ([:a 0] [:b 1] [:c 2])
#+END_SRC

    - Sequences are /lazy/.
    - Sequences can be infinitely long ...

* Lazy sequences

#+BEGIN_SRC clojure
  (range 9)     ;=> (0 1 2 3 4 5 6 7 8)

  (def whole    (range))
  (def odds     (filter odd? whole))
  (def big      (take 3 (drop 999999999 whole)))
  (def triples  (take 3 (partition 3 whole)))

  (def hiawatha (line-seq
                  (io/reader
                    (io/file "hiawatha.txt"))))
  (first hiawatha)
  "Should you ask me, whence these stories?"

  (first hiawatha)
#+END_SRC

* Count

  =count= counts items in a collection.

#+BEGIN_SRC clojure
    (count #{:a :b :c :d})   is  4
    (count       [0 1 2] )   is  3
    (count      [[0 1 2]])   is  1
    (count      [[0  [2]]])  is  1
    (count      [0 [1 2]])   is  2
    (count      [       ])   is  0
    (count      [[][][] ])   is  3
    (count (set [[][][]]))   is  1
    (count  { :a 0 :b 1 })   is  2
    (count  [count count])   is  2
    (count  {count count})   is  1
#+END_SRC

* Collections /function/

    - Collections are functions of their keys.

#+BEGIN_SRC clojure
      ([:a :b :c :d] 3)                     is :d
      ({:A :T, :C :G, :T :A, :G :C} :T)     is :A
      (#{"Chico" "Groucho" "Harpo"} "Karl") is nil
#+END_SRC

    - Strings have to be indexed explicitly.

#+BEGIN_SRC clojure
       (nth "Clojure"  3)                   is \j
       (get "Clojure"  3)                   is \j
      ((vec "Clojure") 3)                   is \j
#+END_SRC

* Syntax

#+BEGIN_SRC clojure
    Truthiness     Everything except nil and false is True.

    Comments       ; This is a comment.
    Whitespace     ,            ; Commas are whitespace.
    Namespaces     namespace/symbol  :namespace/keyword

    Java           . .. new throw try

    Reader Macros  ' ` ~ @ ^ # #(.endswith % ".clj") #tag

    Conventions    _ignore-me *out* zero? swap! k->v
#+END_SRC

    Clojure =nil= is Java =null=.  Strings are Java strings.

* Pipeline macros

#+BEGIN_SRC clojure
  (json/read-str
    (:body (http/request
             {:method  :post ; :debug true
              :url     url
              :headers {"X-Auth-Token" token}}))
    :key-fn keyword)
#+END_SRC

  This is exactly equivalent to that.

#+BEGIN_SRC clojure
  (-> {:method  :post ; :debug true
       :url     url
       :headers {"X-Auth-Token" token}}
      http/request :body
      (json/read-str :key-fn keyword))
#+END_SRC

* Pipeline macros

  Insert =,,,= where the prior expression goes.

#+BEGIN_SRC clojure
  (-> {:method  :post ; :debug true
       :url     url
       :headers {"X-Auth-Token" token}}
      (http/request                      ,,,)
      (:body                             ,,,)
      (json/read-str :key-fn keyword     ,,,))
#+END_SRC

* Pipeline macros

#+BEGIN_SRC clojure
  (pprint
    (util/fmap
      fix
      (apply
        merge-with combine-event-seqs
        (map
          (partial apply hash-map)
          (workflow-events
            (cromwell/metadata
              env id
              {:expandSubWorkflows true}))))))
#+END_SRC

* Pipeline macros

  =->>= means /compose results at the end/.

#+BEGIN_SRC clojure
  (->> {:expandSubWorkflows true}
       (cromwell/metadata env id)
       workflow-events
       (map (partial apply hash-map))
       (apply merge-with combine-event-seqs)
       (util/fmap fix)
       pprint)
#+END_SRC

* Pipeline macros

  Insert =,,,= where the prior expression goes.

#+BEGIN_SRC clojure
  (->> {:expandSubWorkflows true}
       (cromwell/metadata env id            ,,,)
       (workflow-events                     ,,,)
       (map (partial apply hash-map)        ,,,)
       (apply merge-with combine-event-seqs ,,,)
       (util/fmap fix                       ,,,)
       (pprint                              ,,,))
#+END_SRC

* Flexible dependent types

#+BEGIN_SRC clojure
  (def _-? (set "_-"))
  (def digit? (set "0123456789"))
  (def lowercase? (set "abcdefghijklmnopqrstuvwxyz"))

  (s/def ::bucket-name
    (s/and string?
           (partial every? (set/union _-? digit? lowercase?))
           (complement (comp _-? first))
           (complement (comp _-? last))
           (comp (partial > 64) count)
           (comp (partial <  2) count)))

  (when-not (s/valid? ::bucket-name bucket)
    (s/explain ::bucket-name bucket))
#+END_SRC

* Printf debugging

#+BEGIN_SRC clojure
    (defmacro dump
      "Dump [EXPRESSION VALUE]."
      [expression]
      `(let [x# ~expression]
         (do (pprint ['~expression x#])
             x#)))
#+END_SRC

  Then the expression =(dump (+ 1 2))= ...

  - outputs the string =[(+ 1 2) 3]=
  - but still has the value =3=.

* Structured logging with context

#+BEGIN_SRC clojure
  (defmacro info
    "Log EXPRESSION and where it comes from."
    [expression]
    (let [{:keys [line]} (meta &form)]
      `(log/info (json/write-str
                   {'~expression ~expression
                    :file ~*file* :line ~line}))))
#+END_SRC

  - =(info stat)= might write the following log record.

  =INFO: {stat: "Failed", file: "zero.clj", line: 23}=

* Thank you

  [[https://www.honeycomb.io/wp-content/uploads/2018/09/houston-we-have-a-dogblem.gif][Really!]]

  [[file:houston-we-have-a-dogblem.gif]]
