#+TITLE: Introducing Clojure
#+OPTIONS: H:0 num:0 toc:1
# To get an unbreakable space character: C-x8<space>
# That is C-x8 followed by a space character.
# Use org-confluence-export-as-confluence

* Clojure -- the common view

  - Clojure is a hosted functional Lisp.

  - "Hosted" means it leverages another technology.

    - Clojure leverages Java and the JVM.
    - Clojurescript leverages Javascript.

  - "Functional" means it favors immutable data
     and functional composition.

  - "Lisp" means it is as simple as is practical.

* Clojure -- a less common view

  - Clojure is a data-oriented programming language.

  - Defining and tranforming data is central.

  - There is data and the means for transforming it.

  - Virtually nothing else is added to get in the way.

  - Clojure calls this "absence of ceremony".

* The Gardn of EDN

  - Extensible Data Notation

  - EDN is a transfer syntax for network communication.

  - EDN also happens to be the syntax of Clojure.

  - All Clojure code is EDN (Clojure) data.

  - EDN has an informal [[https://github.com/edn-format/edn#edn][specification]].

* Scalars

#+BEGIN_SRC Clojure
    Numbers     23 -7 3.14159 22/7 1/137 6e23 76.0M 285N

    Booleans    false true

    Characters  \a \b ... \y \z \0 ... \9 \space \newline \tab

    Keywords    :keyword :import :require :as :else :keys

    Nil         nil

    Strings     "Strings communicate outside a program."

    Symbols     symbol ns fn + = -> ->> nil? keyword? if or
#+END_SRC

* Collections

#+BEGIN_SRC Clojure
    Vectors     ["Clojure" 0 :to fn?]  [environment scheme :as db]

                  [4 [2 [0 1] [3]] [7 [5 6] [8 9]]]
                  [             4
                  [     2
                    [0 1] [3]              ]
                   [                7
                               [5 6] [8 9]]]

    Maps        {:A :T, :C :G, :T :A, :G :C}

                  {:Title "Montenegro"
                   :Year 1981
                   :Rated :R
                   :Released "09 Oct 1981"
                   :Director "Du≈°an Makavejev"}
#+END_SRC

* More Collections

#+BEGIN_SRC Clojure
    Sets        #{"Chico" "Groucho" "Harpo" "Zeppo"}

    Strings     "A string is a sequence of characters."

    Lists       (+ 0 1 2)  (fn [n] (+ 1 n))  (fn? +)
                  (for [x "ab" y "cd"] {x y})

    - Everything nests

      {[247711 128745 615585] #{ 7 20}
       [724475 209311 596076] #{47 35}
       [ 49338 359939 906095] #{61   }
       [174818 239856 437406] #{ 6 22}
       [535936 885819 472347] #{74  9}
       [ 70989 376305 883810] #{26 68}}
#+END_SRC

* Data

    - What is this?

#+BEGIN_SRC Clojure
      [... {:pipeline_version "cfd0c6b",
            :document_status "Normal",
            :gvcf_path "gs://broad-gotc-prod-storage/pipeline/...",
            :regulatory_designation "RESEARCH_ONLY",
            :project "G102438",
            :data_type "WGS",
            :contamination 9.15968E-4,
            :sample_alias "NWD804584",
            :version 3,
            :location "GCP",
            :gvcf_size 6465061643,
            :gvcf_md5 "30d3fd47fe6876ed91960dfc319306c5",
            :analysis_date "2017-11-03T11:47:30.153-04:00"} ...]
#+END_SRC

* More Data

    - What is this?

#+BEGIN_SRC Clojure
      [:html5
       [:head
        [:title "Home | Compojure Docs"]]
       [:body
        [:div {:class "container-fluid"}
         [:div {:class "row-fluid"}
          [:div {:class "span2 menu"}]
          [:div {:class "span10 content"}
           [:h1 "Compojure Docs"]
           [:ul
            [:li [:a {:href "/start"} "Getting Started"]]
            [:li [:a {:href "/routes"} "Routes in Detail"]]
            [:li [:a {:href "/nesting"} "Nesting Routes"]]]]]]]]
#+END_SRC

* More data

    - What is this?

#+BEGIN_SRC Clojure
      [:vmext:RegisterVimServerParams {:id 7}
       [:vmext:VimServer :name "dvc1-name"
        [:Description "Got me ..."]
        [:vmext:Username "lyonst"]
        [:vmext:Password "password"]
        [:vmext:Url "https://127.0.0.1"]
        [:vmext:IsEnabled true]]
       [:vmext:ShieldManager {:id 23} :name "vsm1"
        [:vmext:Username "vsm1-user"]
        [:vmext:Password "vsm1-pass"]
        [:vmext:Url "https://127.0.0.1"]]]
#+END_SRC

* Sequences

    - Every collection can be sequenced.

    - A sequence prints as a list.

#+BEGIN_SRC Clojure
      (seq  "Clojure")        is (\C \l \o \j \u \r \e)

      (seq  [0 1 2 3 4])      is (0 1 2 3 4)

      (seq #{0 1 2 3 4})      is (0 1 2 3 4)

      (seq  {:a 0 :b 1 :c 2}) is ([:a 0] [:b 1] [:c 2])
#+END_SRC

    - Sequences are lazy.

* Collections /function/

    - Collections are functions of their keys.

#+BEGIN_SRC Clojure
      ([:a :b :c :d] 3)                             is :d

      ({:A :T, :C :G, :T :A, :G :C} :T)             is :A

      (#{"Chico" "Groucho" "Harpo" "Zeppo"} "Karl") is nil
#+END_SRC

    - Strings have to be indexed explicitly.

#+BEGIN_SRC Clojure
      (nth "Clojure" 3)                             is \j
      (get "Clojure" 3)                             is \j
      ((vec "Clojure") 3)                           is \j
#+END_SRC

* Syntax

#+BEGIN_SRC Clojure
    Truthiness     Everything except nil and false is True.

    Comments       ; This is a comment.

    Whitespace     ,

    Namespaces     namespace/symbol  :namespace/keyword

    Java           . .. new try monitor-enter monitor-exit

    Reader Macros  ' ` ~ @ @ ^ # #_ #inst #(.startswith % "prefix") #tag

    Conventions    _ *out* zero? swap!
#+END_SRC

    Clojure =nil= is Java =NULL=.  Clojure strings are Java strings.

* Evaluation
