#+TITLE: Introducing Clojure
#+OPTIONS: H:0 num:0 toc:1
# To get an unbreakable space character: C-x8<space>
# That is C-x8 followed by a space character.
# Use org-confluence-export-as-confluence

* Programming: the common view

  - Programming is about building systems with computers.

  - A /program/ specifies what you want a computer to do.

  - The specification is written in a /programming language/.

  - /Programming/ is the act of writing that specification.

  - Goal: Understand computers to build systems.

* Programming: a less common view

  - Programming is a dialog with a computer about the world.

  - Computers and programming languages are human tools.

  - A computer programmer uses those tools and others ...

    - ... because they complement innate human abilities.
    - ... to explore the world and build understanding.
    - ... to evolve solutions to real human problems.

  - Goal: Understand the world to solve problems.

* Clojure: the common view

  - Clojure is a hosted functional Lisp.

  - "Hosted" means it leverages another technology.

    - Clojure leverages Java and the JVM.
    - Clojurescript leverages Javascript.

  - "Functional" means it favors expressions
     of immutable data and function composition.

  - "Lisp" means it is as simple as is practical.

* Clojure: a less common view

  - Clojure is a data-oriented programming language.

  - Defining and tranforming data is central.

  - There is data and the means for transforming it.

  - Virtually nothing else is added to get in the way.

  - Clojure programmers call this "absence of ceremony".

* The Gardn of EDN

  - Extensible Data Notation

  - EDN is a data interchange format like JSON.

  - EDN also happens to be the syntax of Clojure.

  - All Clojure code is EDN (Clojure) data.

  - EDN has an informal [[https://github.com/edn-format/edn#edn][specification]].

* Scalars

#+BEGIN_SRC clojure
    Numbers     23 -7 3.14159 22/7 1/137 6e23 76.0M 285N

    Booleans    false true

    Characters  \a \b ... \y \z \0 ... \9 \space \newline \tab

    Keywords    :keyword :import :require :as :else :keys

    Nil         nil

    Strings     "Strings communicate outside a program."
#+END_SRC

* Collections

#+BEGIN_SRC clojure
    Vectors     ["Clojure" 0 :to fn?]

                [environ scheme :as db]

                [4 [2 [1 3]] [6 [5 7]]]

                [         4
                [    2
                [  1   3             ]]
                [              6
                [            5   7  ]]]
#+END_SRC

* More Collections

#+BEGIN_SRC clojure
    Maps        {:A :T, :C :G, :T :A, :G :C}

                {:Title "Montenegro"
                 :Year 1981
                 :Rated :R
                 :Released "09 Oct 1981"
                 :Director "DuÅ¡an Makavejev"}

                {:keys [environ schema] :as db}
#+END_SRC
* More Collections

#+BEGIN_SRC clojure
    Sets        #{"Chico" "Groucho" "Harpo" "Zeppo"}

    Strings     "A string is a sequence of characters."

    Regexs      #"/"      #"\s+"     #"[0-9a-fA-f]*"
#+END_SRC

    - Everything nests

#+BEGIN_SRC clojure
                {[247711 128745 615585] #{ 7 20}
                 [724475 209311 596076] #{47 35}
                 [ 49338 359939 906095] #{61   }
                 [174818 239856 437406] #{ 6 22}
                 [535936 885819 472347] #{74  9}
                 [ 70989 376305 883810] #{26 68}}
#+END_SRC

* Data

    - What is this?

#+BEGIN_SRC clojure
      [... {:pipeline_version "cfd0c6b",
            :document_status "Normal",
            :gvcf_path "gs://broad-gotc-prod-storage/pipeline/...",
            :regulatory_designation "RESEARCH_ONLY",
            :project "G102438",
            :data_type "WGS",
            :contamination 9.15968E-4,
            :sample_alias "NWD804584",
            :version 3,
            :location "GCP",
            :gvcf_size 6465061643,
            :gvcf_md5 "30d3fd47fe6876ed91960dfc319306c5",
            :analysis_date "2017-11-03T11:47:30.153-04:00"} ...]
#+END_SRC

* More Data

    - What is this?

#+BEGIN_SRC clojure
      [:html5
       [:head
        [:title "Home | Compojure Docs"]]
       [:body
        [:div {:class "container-fluid"}
         [:div {:class "row-fluid"}
          [:div {:class "span2 menu"}]
          [:div {:class "span10 content"}
           [:h1 "Compojure Docs"]
           [:ul
            [:li [:a {:href "/start"} "Getting Started"]]
            [:li [:a {:href "/routes"} "Routes in Detail"]]
            [:li [:a {:href "/nesting"} "Nesting Routes"]]]]]]]]
#+END_SRC

* More data

    - What is this?

#+BEGIN_SRC clojure
      [:vmext:RegisterVimServerParams {:id 7}
       [:vmext:VimServer :name "dvc1-name"
        [:Description "Got me ..."]
        [:vmext:Username "lyonst"]
        [:vmext:Password "password"]
        [:vmext:Url "https://127.0.0.1"]
        [:vmext:IsEnabled true]]
       [:vmext:ShieldManager {:id 23} :name "vsm1"
        [:vmext:Username "vsm1-user"]
        [:vmext:Password "vsm1-pass"]
        [:vmext:Url "https://127.0.0.1"]]]
#+END_SRC

* Expressions

  - Scalar and collections comprise most expressions.

  - All the expressions we've seen so far are /literals/.

  - The value of a literal expression is just the expression.

  - Literals "print like they read".

  - There is one scalar that does not print as read: *Symbol*

  - And one collection does not print as read: *List*

* Symbols

  A few symbols have already sneaked in: =fn?=  =schema=  =db=

  Here are some other symbols.

#+BEGIN_SRC clojure
      symbol *ns* fn + = -> ->> nil? keyword? java.lang.String
#+END_SRC

  Symbols serve as /identifiers/ or /variables/ in Clojure.

  They name other values within a program.

* Lists

  A list combines other expressions to produce a new value.

#+BEGIN_SRC clojure
      (+ 0 1 2)  (fn [n] (+ 1 n))  (fn? odd?)

      (def beatles #{"George" "John" "Paul" "Ringo"})

      (defn add1 [n] (+ 1 n))

      (if (odd? (rand-int 9) :odd :even)

      (for [x "ab" y "cd"] {x y})
#+END_SRC

  Lists are what make things happen in Clojure programs.

* Evaluation

  - All scalars except *Symbol* evaluate to themselves.

  - Put =22/7= in and get =22/7= out.

  - All collections except *List* evaluate to themselves.

  - Put ={:b 1 :a 0}= in, maybe get ={:a 0 :b 1}= out.

  - Symbols and Lists are evaluated differently though.

* Symbol evaluation

  Symbols get values via =def= or =fn= binding expressions.

  The following =def= expression

#+BEGIN_SRC clojure
      (def beatles #{"George" "John" "Paul" "Ringo"})
#+END_SRC

  binds the symbol =beatles= to the set value

#+BEGIN_SRC clojure
      #{"Ringo" "John" "George" "Paul"}
#+END_SRC

* List evaluation

  The head of list determines what to do with its tail.

* Read, Eval, and Print Loop (REPL)

  - The Clojure dialog is a loop.

    - Read a scalar or collection expression.
    - Evaluate it according

* Sequences

    - Every collection can be sequenced.

    - A sequence prints as a list.

#+BEGIN_SRC Clojure
      (seq  "Clojure")        is (\C \l \o \j \u \r \e)

      (seq  [0 1 2 3 4])      is (0 1 2 3 4)

      (seq #{0 1 2 3 4})      is (0 1 2 3 4)

      (seq  {:a 0 :b 1 :c 2}) is ([:a 0] [:b 1] [:c 2])
#+END_SRC

    - Sequences are lazy.

* Collections /function/

    - Collections are functions of their keys.

#+BEGIN_SRC Clojure
      ([:a :b :c :d] 3)                             is :d

      ({:A :T, :C :G, :T :A, :G :C} :T)             is :A

      (#{"Chico" "Groucho" "Harpo" "Zeppo"} "Karl") is nil
#+END_SRC

    - Strings have to be indexed explicitly.

#+BEGIN_SRC Clojure
      (nth "Clojure" 3)                             is \j
      (get "Clojure" 3)                             is \j
      ((vec "Clojure") 3)                           is \j
#+END_SRC

* Syntax

#+BEGIN_SRC Clojure
    Truthiness     Everything except nil and false is True.

    Comments       ; This is a comment.

    Whitespace     ,

    Namespaces     namespace/symbol  :namespace/keyword

    Java           . .. new try monitor-enter monitor-exit

    Reader Macros  ' ` ~ @ @ ^ # #_ #inst #(.startswith % "prefix") #tag

    Conventions    _ *out* zero? swap!
#+END_SRC

    Clojure =nil= is Java =null=.  Clojure strings are Java strings.
